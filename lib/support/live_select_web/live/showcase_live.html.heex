<div class={if @dark_mode, do: "dark"}>
  <header>
    <div class="p-5 navbar bg-base-100 gap-5">
      <h1 class="text-2xl font-bold flex-1">LiveSelect Showcase App</h1>
      <a class="link text-xl" href="https://github.com/maxmarcon/live_select" target="_blank">
        <img class="hidden dark:block" width="50" src={~p"/images/github-mark-white.png"} />
        <img class="dark:hidden" width="50" src={~p"/images/github-mark.png"} />
      </a>
    </div>
  </header>
  <div :if={!@settings_form.source.valid?} class="px-5 label justify-center text-error">
    ‚ùå Your settings are invalid, check the form for errors
  </div>
  <div class="flex flex-col md:flex-row p-5 gap-2" xmlns="http://www.w3.org/1999/html">
    <div class="flex flex-col md:w-1/2">
      <div class="flex gap-2">
        <div class="form-control md:w-1/4">
          <label class="label cursor-pointer">
            <span class="label-text mr-1">Toggle dark mode</span>
            <input
              id="dark-mode-toggle"
              type="checkbox"
              class="toggle"
              data-toggle-theme="dark,light"
              phx-hook="watchThemeChanges"
              phx-update="ignore"
            />
          </label>
        </div>
        <div class="form-control">
          <.link patch={~p(/?reset=true)} class="btn btn-warning btn-sm mt-1">
            Reset
          </.link>
        </div>
      </div>
      <div class="prose text-center flex flex-row justify-center mt-2">
        <h4>Change settings here:</h4>
      </div>
      <.form for={@settings_form} phx-change="update-settings" id="settings-form">
        <div class="flex flex-wrap p-5 gap-2">
          <div class="form-control max-w-sm">
            {label(@settings_form, :mode, "Mode:", class: "label label-text font-semibold")}
            {select(@settings_form, :mode, [:single, :tags, :quick_tags],
              class: "select select-sm select-bordered text-xs"
            )}
          </div>
          <div class="form-control max-w-sm">
            {label(@settings_form, :max_selectable, "Max selectable:",
              class: "label label-text font-semibold"
            )}
            {number_input(@settings_form, :max_selectable,
              min: 0,
              class: "input input-sm input-bordered",
              disabled: to_string(@settings_form[:mode].value) == "single"
            )}
            {error_tag(@settings_form, :max_selectable)}
          </div>
          <div class="form-control max-w-sm">
            <label class="label cursor-pointer">
              <span class="label-text mr-1">User-defined options:</span>
              {checkbox(@settings_form, :user_defined_options, class: "toggle")}
            </label>
            <label class="label cursor-pointer">
              <span class="label-text mr-1">Allow clear:</span>
              {checkbox(@settings_form, :allow_clear,
                class: "toggle",
                disabled: to_string(@settings_form[:mode].value) != "single"
              )}
            </label>
            <%= label class: "label cursor-pointer" do %>
              <span class="label-text mr-1">Disabled:&nbsp;</span>
              {checkbox(@settings_form, :disabled, class: "toggle")}
            <% end %>
            <%= label class: "label cursor-pointer" do %>
              <span class="label-text mr-1">Options styled as checkboxes:&nbsp;</span>
              <%= checkbox(@settings_form, :options_styled_as_checkboxes, class: "toggle") %>
            <% end %>
          </div>
          <div class="form-control max-w-sm">
            {label(@settings_form, :search_delay, "Search delay in ms:",
              class: "label label-text font-semibold"
            )}
            {number_input(@settings_form, :search_delay,
              min: 0,
              class: "input input-sm input-bordered",
              spellcheck: "false"
            )}
            {error_tag(@settings_form, :search_delay)}
          </div>
          <div class="form-control max-w-sm">
            {label(@settings_form, :placeholder, "placeholder:",
              class: "label label-text font-semibold"
            )}
            {text_input(@settings_form, :placeholder,
              class: "input input-sm input-bordered",
              spellcheck: "false"
            )}
            {label(@settings_form, :placeholder, default_value_descr(:placeholder),
              class: "label label-text"
            )}
            {error_tag(@settings_form, :placeholder)}
          </div>
          <div class="form-control max-w-sm">
            {label(@settings_form, :update_min_len, "update_min_len:",
              class: "label label-text font-semibold"
            )}
            {number_input(@settings_form, :update_min_len,
              min: 0,
              class: "input input-sm input-bordered",
              spellcheck: "false"
            )}
            <label class="label label-text-alt">
              Min text length to trigger update<br />{default_value_descr(:update_min_len)}
            </label>
            {error_tag(@settings_form, :update_min_len)}
          </div>
          <div class="form-control max-w-sm">
            {label(@settings_form, :debounce, "debounce:",
              class: "label label-text font-semibold"
            )}
            {number_input(@settings_form, :debounce,
              min: 0,
              class: "input input-sm input-bordered",
              spellcheck: "false"
            )}
            <label class="label label-text-alt">
              delay in ms before update<br />{default_value_descr(:debounce)}
            </label>
            {error_tag(@settings_form, :debounce)}
          </div>

          <div class="form-control max-w-sm">
            {label(@settings_form, :"phx-focus", "focus event:",
              class: "label label-text font-semibold"
            )}
            {text_input(@settings_form, :"phx-focus",
              class: "input input-sm input-bordered",
              spellcheck: "false"
            )}
            <label class="label label-text-alt">
              Event to send on focus
            </label>
            {error_tag(@settings_form, :"phx-focus")}
          </div>

          <div class="form-control max-w-sm">
            {label(@settings_form, :"phx-blur", "blur event:",
              class: "label label-text font-semibold"
            )}
            {text_input(@settings_form, :"phx-blur",
              class: "input input-sm input-bordered",
              spellcheck: "false"
            )}
            <label class="label label-text-alt">
              Event to send on blur
            </label>
            {error_tag(@settings_form, :"phx-blur")}
          </div>

          <div class="form-control max-w-sm">
            <%= label class: "label cursor-pointer" do %>
              <span class="label-text font-semibold">style:&nbsp;</span>
              {select(@settings_form, :style, [:tailwind, :daisyui, :none],
                class: "select select-sm select-bordered text-xs"
              )}
            <% end %>
          </div>

          <div
            id="style-dropdown"
            class={
            "w-full collapse collapse-arrow #{if @show_styles, do: "collapse-open", else: "collapse-close"} border
            border-base-300 bg-base-100 rounded-box"
          }
          >
            {checkbox(@settings_form, :show_styles,
              phx_change: "toggle-styles",
              class: "w-full",
              value: @show_styles
            )}
            <div class="collapse-title text-sm font-medium">
              {if @show_styles, do: "Hide styling options", else: "Show styling options"} &nbsp;
              <label
                :if={!@show_styles && Settings.has_style_options?(@settings_form.source)}
                class="text-warning"
              >
                Some styling options are set
              </label>
            </div>
            <div class="collapse-content">
              <p class="whitespace-normal font-light text-sm">
                Set or override styling options. The defaults are set by the selected style.
                Classes in the defaults can be selectively
                excluded with the &ldquo;<span class="italic">!class-name</span>&rdquo; notation
              </p>
              <div class="form-control mt-2">
                <label class="label label-text">Filter styling options by name:</label>
                <div class="input-group w-full">
                  {text_input(@settings_form, :style_filter,
                    value: @style_filter,
                    class: "input input-bordered input-sm flex-1",
                    phx_change: "filter-styles"
                  )}
                  <button
                    type="button"
                    class="btn btn-square btn-sm"
                    phx-click="clear-style-filter"
                  >
                    <.x_icon />
                  </button>
                </div>
              </div>
              <label
                :if={
                  Enum.filter(@class_options, &String.contains?(to_string(&1), @style_filter))
                  |> Enum.empty?()
                }
                class="label label-text text-error text-sm"
              >
                No styles match filter
              </label>
              <%= for class <- @class_options do %>
                <%= if valid_class(@settings_form.source, class) do %>
                  <div class={"form-control w-full #{unless String.contains?(to_string(class), @style_filter), do: "hidden"}"}>
                    {label(@settings_form, class, "#{class}:",
                      class:
                        "label label-text font-semibold #{if Ecto.Changeset.get_field(@settings_form.source, class), do: "text-info"}"
                    )}
                    {text_input(@settings_form, class,
                      class: "input input-sm input-bordered",
                      spellcheck: "false"
                    )}
                    <%= if default_class(Ecto.Changeset.get_field(@settings_form.source, :style), class) do %>
                      <label class="label label-text italic">
                        default from {Ecto.Changeset.get_field(@settings_form.source, :style)} style: &ldquo;{default_class(
                          Ecto.Changeset.get_field(@settings_form.source, :style),
                          class
                        )}&rdquo;
                      </label>
                    <% end %>
                    {error_tag(@settings_form, class)}
                  </div>
                <% end %>
              <% end %>
            </div>
          </div>
        </div>

        <button :if={false} class="btn btn-sm" type="button" phx-click="clear-selection">
          Clear selection programmatically
        </button>
      </.form>

      <div class="hidden md:block prose text-center">
        <h4>See events and messages here:</h4>
      </div>

      <div id="event-list" class="hidden md:flex flex-col gap-y-2 mt-2">
        <%= for {event, position} <- Enum.with_index(@events) do %>
          <div
            id={"event-#{event.id}"}
            class={[
              if(position == 0, do: "hidden"),
              "ml-10 border-info rounded-lg border rounded p-2"
            ]}
            phx-mounted={
              JS.show(transition: {"ease-in duration-500", "opacity-0", "opacity-100"}, time: 500)
            }
          >
            <Render.event {event} />
          </div>
        <% end %>
      </div>
    </div>

    <div class="flex flex-col md:w-1/2 items-center gap-y-5 bg-base-100 md:border rounded-md">
      <div class="prose text-center mt-2">
        <h4>Try out the component here:</h4>
      </div>
      <div class="md:w-3/4">
        <.form
          for={@live_select_form}
          phx-change="change"
          phx-submit="submit"
          id="live-select-form"
        >
          <div class="grid grid-cols-4 gap-1">
            <div class="col-span-3 form-control">
              <.live_select
                field={@live_select_form[:city_search]}
                value_mapper={&value_mapper/1}
                {live_select_assigns(@settings_form.source)}
              >
                <:option :let={%{label: label, value: _value, selected: selected}}>
                  <%= if @settings_form[:options_styled_as_checkboxes].value do %>
                    <div class="flex justify-content items-center">
                      <input
                        class="rounded w-4 h-4 mr-3 border border-border"
                        type="checkbox"
                        checked={selected}
                      />
                      <span class="text-sm"><%= label %></span>
                    </div>
                  <% else %>
                    <%= label %>
                  <% end %>
                </:option>
              </.live_select>
            </div>
            <div class="flex flex-col gap-y-1">
              {submit("Submit",
                class: "btn btn-primary btn-sm text-xs md:text-md",
                disabled: !@settings_form.source.valid? || @settings_form[:disabled].value
              )}
            </div>
            <div class="mt-2 bg-neutral text-center text-neutral-content rounded rounded-md m-1 p-1 text-xs col-span-3">
              !! This should not move when the dropdown opens !!
            </div>
            <div :if={@submitted} class="col-span-4 text-info text-center my-5 w-full">
              <span :if={@cities}>
                ‚úÖ You selected: {@cities}
              </span>
              <span :if={!@cities}>
                ‚ùå Nothing selected
              </span>
            </div>
          </div>
        </.form>
      </div>

      <div
        class="w-full md:w-2/3 mt-5 mb-5 relative border-info border rounded-lg p-2"
        id="live-select-code"
      >
        <div
          id="copy-to-clipboard-tooltip"
          class="tooltip-success absolute top-0 right-0 "
          data-tip="Copied to clipboard!"
        >
          <button
            id="copy-to-clipboard"
            data-clipboard-target="#live-select-code"
            class="btn bg-inherit text-inherit hover:bg-base-300"
          >
            <.copy_to_clipboard_icon />
          </button>
        </div>
        <Render.live_select
          options_styled_as_checkboxes={@settings_form[:options_styled_as_checkboxes].value}
          opts={Settings.live_select_opts(@settings_form.data, true)}
        />
      </div>
    </div>
  </div>
</div>
